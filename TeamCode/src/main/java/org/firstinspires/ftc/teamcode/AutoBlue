package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

import java.util.Base64;

@Autonomous(name = "AutoRed")
public class AutoRed extends LinearOpMode {

    DcMotorEx RFMotor;
    DcMotorEx LFMotor;
    DcMotorEx RBMotor;
    DcMotorEx LBMotor;
    DcMotorEx CarouselMotor;
    DcMotorEx ArmHeightMotor;
    DcMotorEx ArmIntakeMotor;

    @Override
    public void runOpMode() throws InterruptedException {
        //Motor Commands
        LFMotor = (DcMotorEx) hardwareMap.dcMotor.get("LFMotor");
        RFMotor = (DcMotorEx) hardwareMap.dcMotor.get("RFMotor");
        LBMotor = (DcMotorEx) hardwareMap.dcMotor.get("LBMotor");
        RBMotor = (DcMotorEx) hardwareMap.dcMotor.get("RBMotor");
        CarouselMotor = (DcMotorEx) hardwareMap.dcMotor.get("CarouselMotor");
        ArmHeightMotor = (DcMotorEx) hardwareMap.dcMotor.get("ArmHeightMotor");
        ArmIntakeMotor = (DcMotorEx) hardwareMap.dcMotor.get("ArmIntakeMotor");
        LBMotor.setDirection(DcMotorEx.Direction.REVERSE);
        RBMotor.setDirection(DcMotorEx.Direction.REVERSE);

        double AIMEncoder, CarouselTravelDistance, CarouselTravelCap, MotorEncoderCap, AHMEncoder;

        ArmHeightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        waitForStart();

        ArmHeightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        do {
            AHMEncoder = ArmHeightMotor.getCurrentPosition();
            ArmHeightMotor.setVelocity(-500);
            telemetry.addData("Arm Height:", ArmHeightMotor.getCurrentPosition());
            telemetry.update();
        } while(AHMEncoder > -2375);

        ArmHeightMotor.setVelocity(0);

        do {
            MotorEncoderCap = motorEncoderAvg();
            goForward(.3);
            telemetry.addData("MotorEncoderCap:", MotorEncoderCap);
            telemetry.update();
        } while(MotorEncoderCap < 750);

        ArmIntakeMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        ArmIntakeMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        goForward(0);

        do {
            AIMEncoder = Math.abs(ArmIntakeMotor.getCurrentPosition());
            ArmIntakeMotor.setVelocity(-250);
        } while(AIMEncoder < 300);

        encoderReset();

        do {
            MotorEncoderCap = motorEncoderAvg();
            goLeft(0.2);
            telemetry.addData("MotorEncoderCap:", MotorEncoderCap);
            telemetry.update();
        } while(MotorEncoderCap < 1000);

        encoderReset();
        /*
        do {
            MotorEncoderCap = motorEncoderAvg();
            goBackward(.3);
        } while(MotorEncoderCap > -400);
        /*
        encoderReset();
        do {
            CarouselTravelCap = 11200;
            CarouselMotor.setVelocity(3000);
            CarouselTravelDistance = CarouselMotor.getCurrentPosition();
        } while(CarouselTravelDistance < CarouselTravelCap);
        encoderReset();
        do {
            MotorEncoderCap = motorEncoderAvg();
            goForward(500);
        } while(MotorEncoderCap < 500);
        encoderReset();
        do {
            MotorEncoderCap = motorEncoderAvg();
            goLeft(500);
        } while(MotorEncoderCap < 500);
        encoderReset();
        */
    }
    void encoderReset() {
        LFMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RFMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        CarouselMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        ArmIntakeMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RFMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        CarouselMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        ArmIntakeMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }
    public Double motorEncoderAvg() {
        double LFEncoder = Math.abs(LFMotor.getCurrentPosition());
        double RFEncoder = Math.abs(RFMotor.getCurrentPosition());
        double LBEncoder = Math.abs(LBMotor.getCurrentPosition());
        double RBEncoder = Math.abs(RBMotor.getCurrentPosition());
        double EncoderAvg = (LFEncoder + RFEncoder + LBEncoder + RBEncoder)/4;
        return EncoderAvg;
    }

    public void goForward(double speed) {
        LFMotor.setPower(speed);
        RFMotor.setPower(speed);
        LBMotor.setPower(speed);
        RBMotor.setPower(speed);
    }

    public void goBackward(double speed) {
        LFMotor.setVelocity(-speed);
        RFMotor.setVelocity(-speed);
        LBMotor.setVelocity(-speed);
        RBMotor.setVelocity(-speed);
    }

    public void goLeft(double speed) {
        LFMotor.setVelocity(-speed);
        RFMotor.setVelocity(speed);
        LBMotor.setVelocity(speed);
        RBMotor.setVelocity(-speed);
    }
}
